plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
    id "org.sonarqube" version "5.0.0.4638"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
group = mod_group_id

repositories {
    mavenCentral()
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.tterrag.com/" }
    maven { url = "https://modmaven.dev/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.blamejared.com/" }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
        //entry('public net.minecraft.world.item.crafting.ShapelessRecipe result #result')
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'mixin.env.disableRefMap', 'true'
        modSource project.sourceSets.main
    }

    client {
    }

    client2 {
        configure ("client")

        programArguments.addAll '--username', 'Dev2'
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${jei_mc_version}:${jei_version}"
    runtimeOnly "mezz.jei:jei-${jei_mc_version}:${jei_version}"
    compileOnly "curse.maven:balm-531761:${balm_cf_file_id}"
    runtimeOnly "curse.maven:balm-531761:${balm_cf_file_id}"
    compileOnly "curse.maven:craftingtweaks-233071:${crafting_tweaks_cf_file_id}"
    runtimeOnly "curse.maven:craftingtweaks-233071:${crafting_tweaks_cf_file_id}"
    //compileOnly "curse.maven:itemborders-513769:${item_borders_cf_file_id}")
    //compileOnly "curse.maven:iceberg-520110:${iceberg_cf_file_id}")
    //compileOnly "curse.maven:prism-638111:${prism_cf_file_id}")
    compileOnly "curse.maven:chipped-456956:${chipped_cf_file_id}"
    compileOnly "curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}"
    compileOnly "curse.maven:athena-841890:${athena_cf_file_id}"
/*
    compileOnly "curse.maven:autoreglib-250363:${autoreglib_cf_file_id}")
    compileOnly "curse.maven:quark-243121:${quark_cf_file_id}")
*/

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.+'
    testImplementation "org.mockito:mockito-core:5.1.+"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_issue_tracker_url: mod_issue_tracker_url, mod_logo_file: mod_logo_file, mod_credits: mod_credits,
            mod_authors         : mod_authors, mod_description: mod_description, mod_display_url: mod_display_url,
            mod_full_version    : "${project.mod_version}.${getBuildNumber()}${getStable()}"

    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : project.mod_id,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : project.mod_id,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}


static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return System.getenv("GITHUB_RUN_NUMBER").toString()
    }
    return ""
}

static def getStable() {
    if (System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev")) {
        return "-SNAPSHOT"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("${github_package_url}")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = mod_id
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${mod_id}"
        property "sonar.projectKey", "${sonar_project_key}"
    }
}

task printVersionName {
    println "version:" + project.version
}
